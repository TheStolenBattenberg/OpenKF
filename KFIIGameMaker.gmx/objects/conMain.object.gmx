<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization

//
// GML Initialization
//
math_set_epsilon(0.00001);

//
// Initialize File System
//
FileSystemInitialize(FSFlag.None);

//
// Load Configuration
//
GameConfig = null;
if(!GameConfigExists())
{
    show_debug_message("No Configuration exists. Loading default...");
    GameConfig = GameConfigDefault();   
}else{
    show_debug_message("Loading saved configuration...");
    GameConfig = GameConfigLoad();
}

GameConfigApply();

//
// Load Externals, create objects...
//
DExterityInit();
AEolianInit();

MSMVertexFormatInit();
MAMVertexFormatInit();

InputManagerInitialize();
AudioManagerInitialize();   //WOOO REVERB!!! WOOO FMOD!! :3
UIManagerInitialize();
RendererInitialize();

CollisionWorldCreate();     //Collision

application_surface_draw_enable(false);
application_surface_enable(false);

//
// Load T/D Assets
//
FileSystemOpenT("COM\FDAT.T", FSOpenFlags.None);
FileSystemOpenT("COM\MO.T", FSOpenFlags.None);
FileSystemOpenT("COM\RTIM.T", FSOpenFlags.None);
FileSystemOpenT("COM\RTMD.T", FSOpenFlags.None);
FileSystemOpenT("COM\VAB.T", FSOpenFlags.None);
FileSystemOpenT("COM\ITEM.T", FSOpenFlags.None);
FileSystemOpenT("COM\TALK.T", FSOpenFlags.None);
FileSystemOpenD("OP.D", FSOpenFlags.None);

//
// Initialize Databases
//
ItemDatabase = ItemDatabaseCreateDefault();

//
// Load FDAT assets
//
fdatTexture = FileSystemLoadRTIM("FDAT_47", "Texture\FDAT47\");
fdatDB      = MIXDBLoadFromBuffer(FileSystemGetBuffer("FDAT_48"), FileSystemGetOffset("FDAT_48"));
gameSound   = FileSystemLoadVAB("VAB_0", "SoundEffects");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialize Game Stuff
enum GameState
{
    None,
    Title,
    NewGame,
    Menu,
    Playing
}
gameState = GameState.None;
gameMap   = null;

PlayerInstantiate();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Debugmode/title

if(debug == true)
{
    room_goto(rmDebugger);
}else{  
    gameState = GameState.Title;
    
    room_goto(rmGame);
    UIInstantiate(uiMainMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Delta Time

//Target frame rate is 60FPS, so our constant for multiplication is 59.99999999999988 (1 / (1/60))

global.DT = (delta_time / 1000000) * 59.99999999999988;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Stuff

InputManagerPollDevices();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game State Logic

switch(gameState)
{
    case GameState.NewGame:
        //Set Default Map
        GameSetMap(mapWestCoast);
        
        //Set Default Player Start
        objPlayer.posX = 31;
        objPlayer.posY = 16 + objPlayer.height;
        objPlayer.posZ = 35;
        objPlayer.posLastY = objPlayer.posY;
        
        objPlayer.rotX  = 0;
        objPlayer.rotY  = -45;

        //Instantiate HUD
        UIInstantiate(uiHUD);
        
        //Set Game State
        GameStateSet(GameState.Playing);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shut Down

//
// Save Config
//
GameConfigSave(GameConfig);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear Window

draw_clear(c_black);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Renderer Surface

if(global.Renderer != null)
{  
    //Calculate the scale...
    var aspectX = window_get_width()  / GameConfig[? "renderWidth"];
    var aspectY = window_get_height() / GameConfig[? "renderHeight"];
    
    shader_set(shdScreenTint);
    shader_set_uniform_f(shader_get_uniform(shdScreenTint, "uTint"), conRenderer.screenTintR, conRenderer.screenTintG, conRenderer.screenTintB, conRenderer.screenTintI);
    
    //Side BB or Top/Bottom BB?
    if(aspectX &gt; aspectY)
    {
        var offset = abs(window_get_width() - (GameConfig[? "renderWidth"] * aspectY)) / 2.0;
        draw_surface_ext(global.Renderer.surface, offset, 0, aspectY, aspectY, 0, c_white, 1);
    }else{
        var offset = abs(window_get_height() - (GameConfig[? "renderHeight"] * aspectX)) / 2.0;
        draw_surface_ext(global.Renderer.surface, 0, offset, aspectX, aspectX, 0, c_white, 1);    
    }
    
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw UI Manager Surface

if(global.UIManager != null)
{  
    //Calculate the scale...
    var uiAspectX = window_get_width() / GameConfig[? "renderWidth"];
    var uiAspectY = window_get_height() / GameConfig[? "renderHeight"];
    
    //Side BB or Top/Bottom BB?
    if(uiAspectX &gt; uiAspectY)
    {
        var uiOffset = abs(window_get_width() - (GameConfig[? "renderWidth"] * uiAspectY)) / 2.0;
        draw_surface_ext(global.UIManager.surface, uiOffset, 0, uiAspectY, uiAspectY, 0, c_white, 1);
    }else{
        var uiOffset = abs(window_get_height() - (GameConfig[? "renderHeight"] * uiAspectX)) / 2.0;
        draw_surface_ext(global.UIManager.surface, 0, uiOffset, uiAspectX, uiAspectX, 0, c_white, 1);    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
