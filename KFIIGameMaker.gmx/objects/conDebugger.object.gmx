<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Menu Vars

optionSelected = 0;
optionObject   = null;
optionList     = ds_list_create();


overlayMode = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Menu Add Options

DebuggerAddOption("Launch From Title", null);
DebuggerAddOption("MO Test", dbgMOTest);
DebuggerAddOption("Video Player", dbgVideo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw &amp; Update Debugger UI

if(optionObject == null &amp;&amp; room == rmDebugger)
{
    //Draw Debug Options
    draw_set_halign(fa_center);
     
    for(var i = 0; i &lt; ds_list_size(optionList); ++i)
    {
        //Get option from list
        var option = optionList[| i];
        
        //Draw option lable
        var selected = optionSelected == i;
        draw_set_colour(lerp($B8B7AA, $4E98EB, selected));
        draw_text(room_width/2, (room_height/16) + (16 * i), option[0]);
        
        //Option selection
        if(selected &amp;&amp; keyboard_check_pressed(ord("E")))
        {
            if(option[1] != null)
            {
                optionObject = instance_create(0, 0, option[1]);
            }else{
                switch(option[0])
                {
                    case "Launch From Title":
                        room_goto(rmGame);
                        GameStateSet(GameState.Title);
                        UIInstantiate(uiMainMenu);
                        
                    break;
                }
            }
            show_debug_message(option[0]);
        } 
    }
    
    draw_set_halign(fa_left);
    
    //Update selection
    optionSelected += (keyboard_check_pressed(ord("S")) - keyboard_check_pressed(ord("W")));
    if(optionSelected == ds_list_size(optionList))
    {
        optionSelected = 0;
    }else
    if(optionSelected &lt; 0)
    {
        optionSelected = ds_list_size(optionList)-1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Switch Overlay mode

switch(keyboard_lastkey)
{
    case ord("0"):
        overlayMode = 0;
    break;
    
    case ord("1"):
        overlayMode = 1;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Overlays

if(room == rmGame &amp;&amp; overlayMode == 0 &amp;&amp; instance_exists(objPlayer))
{
    draw_set_font(fntDebug)
    draw_set_colour(c_lime);
    
    draw_text(2, 2, "Player Info");
    draw_text(2, 16, "Current State: " + string(objPlayer.playerState));
    draw_text(2, 32, "Last State:    " + string(objPlayer.playerStateLast));
    
    draw_text(2, 64, "X Position: " + string(objPlayer.posX));
    draw_text(2, 80, "Z Position: " + string(objPlayer.posZ));
    draw_text(2, 96, "Y Position: " + string(objPlayer.posY));
    
    draw_text(2, 128, "LR Speed: " + string(objPlayer.lrSpeed));
    draw_text(2, 144, "FB Speed: " + string(objPlayer.fbSpeed));
    draw_text(2, 160, "UD Speed: " + string(objPlayer.udSpeed));
    
    draw_text(2, 192, "Last Safe Y: " + string(objPlayer.posLastSafeY));
    
    draw_text(2, 256, "Status (Bad):  " + dec_to_hex(objPlayer.statusBad, 4));
    draw_text(2, 272, "Status (Good): " + dec_to_hex(objPlayer.statusGood, 4));
}else
if(room = rmGame &amp;&amp; overlayMode == 1 &amp;&amp; instance_exists(conRenderer))
{
    draw_set_font(fntDebug)
    draw_set_colour(c_lime);    
    
    draw_text(2, 2, "Render Info");
    draw_text(2, 16, "FPS: " + string(fps_real));
    draw_text(2, 32, "UPS: " + string(fps));
    draw_text(2, 32, "Delta: " + string(global.DT));
}

draw_set_font(LanguageGetFont());
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
