<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

//Initialize Primary Audio Stuffs
AEOAudioInit(256);
AEOAudioSetListenerCount(1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create DSP Effects

dspReverb1 = AEODSPCreateByType(DSPType.SFXReverb);

//AEODSPSetParamF(dspReverb1, DSPReverbSFXParam.DecayTime, 100);
//AEODSPSetParamF(dspReverb1, DSPReverbSFXParam.EarlyDelay, 20);
AEODSPSetParamF(dspReverb1, DSPReverbSFXParam.Diffusion, 10);
AEODSPSetParamF(dspReverb1, DSPReverbSFXParam.Density, 50);

/*
enum DSPReverbSFXParam
{
    DecayTime     = 0,      //Float, Miliseconds
    EarlyDelay    = 1,      //Float, Miliseconds
    LateDelay     = 2,      //Float, Miliseconds
    HFRefererence = 3,      //Float, Hz
    HFDecayRatio  = 4,      //Float, %
    Diffusion     = 5,      //Float, %
    Density       = 6,      //Float, %
    LowShelfFreq  = 7,      //Float, Hz
    LowShelfGain  = 8,      //Float, dB
    HighCut       = 9,      //Float, Hz
    EarlyLateMix  = 10,     //Float, %
    WetLevel      = 11,     //Float, dB
    DryLevel      = 12,     //Float, dB
}
*/

//Enable this to list parameters for a DSP... (add / to start of group comment)
/* List Parameters
for(var i = 0; i &lt; AEODSPParamGetCount(dspReverb1); ++i)
{
    var paramStruct = AEODSPParamGetInfo(dspReverb1, i);
    
    //Print Info
    show_debug_message("DSP PARAM "+string(i)+": ");
    show_debug_message("Param Name: " + AEODSPParamInfoGetName(paramStruct));
    show_debug_message("Param Label: " + AEODSPParamInfoGetLabel(paramStruct));
    show_debug_message("Param Description: " + AEODSPParamInfoGetDescription(paramStruct));
    show_debug_message("Param Type: " + string(AEODSPParamInfoGetType(paramStruct)));
    
    //AEODSPParamInfoFree(paramStruct);
}
// */

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Busses

// Music
busMusic = AEOBusCreate("Music");
AEOBusSetVolume(busMusic, conMain.GameConfig[? "audioMusicVolume"]);

// Sound Effects
busSoundFX = AEOBusCreate("Sound Effects");
AEOBusSetVolume(busSoundFX, conMain.GameConfig[? "audioSoundVolume"]);
AEOBusAddDSP(busSoundFX, 0, dspReverb1);

// Master
busMaster = AEOBusCreate("Master");
AEOBusSetVolume(busMaster, 1.0);
AEOBusAddChild(busMaster, busMusic);
AEOBusAddChild(busMaster, busSoundFX);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music Stuff

enum MusicQueueState
{
    Waiting,
    Playing,
    FadingOut,
    FadingIn
};
musicQueueState = MusicQueueState.Waiting;
musicQueueWait  = false;
musicFade       = 1.0;
musicQueue = ds_queue_create();

musicNext = null;
musicCurrentSound = null;
musicCurrentChannel = null; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update AEolian

AEOAudioUpdate();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Music Queue

switch(musicQueueState)
{
    //Playing Music State
    case MusicQueueState.Playing:
    if(musicQueueWait)
    {
        if(musicCurrentChannel != null)
        {
            if(!AEOChannelIsPlaying(musicCurrentChannel))
            {
                musicQueueState = MusicQueueState.Waiting;
            }
        }
        break;
    }    

    //Waiting for music to be added.
    case MusicQueueState.Waiting:
    
    //When the music queue isn't empty...   
    if(!ds_queue_empty(musicQueue))
    {
        //Get the queued music
        musicNext = ds_queue_dequeue(musicQueue);  
        
        //Start fading out current music.
        musicFade = 1.0;
        musicQueueState = MusicQueueState.FadingOut;
    }
    break;
    
    //Fading out old music
    case MusicQueueState.FadingOut:
    
        //Set volume of the music bus, 'not quite linearly' (r)
        AEOBusSetVolume(busMusic, smoothstep(0, conMain.GameConfig[? "audioMusicVolume"], musicFade));
                
        musicFade-= (1/120) * global.DT;
        if(musicFade &lt;= 0.0 || musicCurrentChannel == null)
        {
            //Free Old Music
            if(musicCurrentChannel != null)
                AEOChannelStop(musicCurrentChannel);

            if(musicCurrentSound != null)
                AEOSoundFree(musicCurrentSound);
                
            //Load New Music...
            if(musicNext[1] == false)
            {
                musicCurrentSound = AEOSoundLoadFromFile(musicNext[0], SoundFlag.LoopOff | SoundFlag.Is2D | SoundFlag.IsStream);
            }else
            {
                musicCurrentSound = AEOSoundLoadFromFile(musicNext[0], SoundFlag.LoopNormal | SoundFlag.Is2D | SoundFlag.IsStream);
            }
            
            //Play New Music
            musicCurrentChannel = AEOSoundPlay(musicCurrentSound, busMusic);
            
            musicQueueState = MusicQueueState.FadingIn;
            musicFade = 0.0;
        }
    break;
    
    case MusicQueueState.FadingIn:
    
        //Set volume of music bus...
        AEOBusSetVolume(busMusic, smoothstep(0, conMain.GameConfig[? "audioMusicVolume"], musicFade));
        
        musicFade += (1/15) * global.DT;
        
        if(musicFade &gt;= 1.0)
        {
            musicQueueState = MusicQueueState.Playing;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
