<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Data

//Player Inventory
inventory = InventoryCreate();
InventoryAddItem(inventory, ItemID.EarthHerb, 98);

//Player Parameters
speedWalk = 0.05;   //Speed while walking
accelWalk = 0.20;   //Walking Acceleration
decelWalk = 0.25;   //Walking Deceleration

speedRun  = 0.08;   //Speed while running
accelRun  = 0.18;   //Run Acceleration
decelRun  = 0.25;   //Run Deceleration

moveSpeed = 0.15;   //Actual Speed

height = 0.9;           //Height of the player
maxClimbHeight = 0.8;   //Max Height the player can climb

//Player Status

/** Good Status Flags:
 *    Missile Shield        (1 &lt;&lt; 0 | 1)
 *    Resist Fire           (1 &lt;&lt; 1 | 2)
 *    Light                 (1 &lt;&lt; 2 | 4)
 *    Demons Pick           (1 &lt;&lt; 3 | 8)
 *    Seaths Plume          (1 &lt;&lt; 4 | 16)
 *    Phantom Rod           (1 &lt;&lt; 5 | 32)
**/
statusGood = $0000;
statusMissileShieldTimer = 0;
statusResistFireTimer    = 0;
statusLightTimer         = 0;
statusDemonsPickTimer    = 0;
statusSeathsPlumeTimer   = 0;
statusPhantomRodTimer    = 0;

/** Bad Status Flags:
 *    Posion                (1 &lt;&lt; 0 | 1)
 *    Dark                  (1 &lt;&lt; 1 | 2)
 *    Slow                  (1 &lt;&lt; 2 | 4)
 *    Paralyze              (1 &lt;&lt; 3 | 8)
 *    Curse                 (1 &lt;&lt; 4 | 16)
 *    Crippled              (1 &lt;&lt; 5 | 32)
**/
statusBad = $0000;
statusPosionTimer   = 0;
statusDarkTimer     = 0;
statusSlowTimer     = 0;
statusParalyzeTimer = 0;
statusCurseTimer    = 0;
statusCrippledTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Equipment

equipWeapon = 0;    //FDAT - 49 + this
equipShield = 1;    //ITEM - 34 + this
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Equipment States

// State of the equipped weapon
enum EquippedWeaponState
{
    Down,           //Weapon not in use
    Swing,          //Weapon Being Swung...
    AttackPhysical, //Weapon Physical Attack
    AttackMagicA,   //Weapon Sword Magic A
    AttackMagicB    //Weapon Sword Magic B
}
weaponState = EquippedWeaponState.Down;
weaponMesh  = FileSystemLoadMO("FDAT_"+string(49 + equipWeapon), "none");
weaponPosX  = 0;
weaponPosY  = 0;
weaponPosZ  = 0;

// State of the equipped shield
enum EquippedShieldState
{
    Down,     //Shield not in use
    Raising,  //Shield Raising
    Up,       //Shield in use
    Lowering  //Shield Lowering
}
shieldState = EquippedShieldState.Down;
shieldRaise = 0.0;
shieldMesh  = FileSystemLoadTMD("ITEM_"+string(34 + equipShield), "none");
shieldPosX  = 0;
shieldPosY  = 0;
shieldPosZ  = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Location &amp; Collision

//Location &amp; Rotation Vectors
posX = 0;
posY = 0;
posZ = 0;
rotX = 0;
rotY = 0;
rotZ = 0;

posLastY = 0;
posLastSafeY = 0;

//Special Camera Z (smooth climb, viewbob)
camY = 0;
camBob = 0;

// Speed Vectors
udSpeed = 0.0;
lrSpeed = 0.0;
fbSpeed = 0.0;

//Trace Ray
maxTraceDist = 1.25;
tracedObject = null;


//Colliders
cShape = CollisionShapeCreateCylinderY(0.25, height/2);
cBody  = CollisionBodyCreate(cShape);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player State

enum PlayerState
{
    Moving   = 0,
    LookItem = 1,
}
playerStateLast = PlayerState.Moving;
playerState     = PlayerState.Moving;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LookItem

lookItemID   = 0;
lookItemInst = array_create(1);
lookItemMesh = null;
lookItemContainer = null;

lookPosX = 0;
lookPosY = 0;
lookPosZ = 0;
lookRotX = 0;
lookRotY = 0;
lookRotZ = 0;
lookInterp = 0.0;

enum LookItemState
{
    PickUpItem,
    ViewItem,
    TakeItem,
    PutDownItem
}
lookState = LookItemState.PickUpItem;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Menus Open/Close

//Inventory Hotkey
if(InputManagerGetPressed(InputMap.Menu))
{
    switch(GameStateGet())
    {
        case GameState.Playing:
            if(instance_exists(uiInventory))
                break;
                
            SoundPlay2DPitch(WBFGetWave(conMain.gameSound, 14), 0.90);
            UIInstantiate(uiInventory);    
            GameStateSet(GameState.Menu);        
        break;
        
        case GameState.Menu:
            if(!instance_exists(uiInventory))
                break;
                
            SoundPlay2DPitch(WBFGetWave(conMain.gameSound, 13), 0.71);
            UIDestroy(uiInventory.id);    
            GameStateSet(GameState.Playing);   
                 
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit when game state is not playing

if(GameStateGet() != GameState.Playing)
{
    tracedObject = null;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Status Timers

//
// Bad Status
//
if(PlayerGetBadStatusSet(BadPlayerStatus.Crippled))
{
    statusCrippledTimer -= (0.0166666666666667 * global.DT);
    
    //Set Screen Tint to a red
    conRenderer.screenTintR = 1.0;
    conRenderer.screenTintG = 0.0;
    conRenderer.screenTintB = 0.0;
    conRenderer.screenTintI = smoothstep(0, 0.5, max((statusCrippledTimer - 1) / 2, 0));
    
    if(statusCrippledTimer &lt;= 0)
    {
        PlayerClearBadStatus(BadPlayerStatus.Crippled);
    }
}

if(PlayerGetBadStatusSet(BadPlayerStatus.Poison))
{
    //Count down the timer
    statusPosionTimer -= (0.0166666666666667 * global.DT);
    
    //Set Screen Tint to a greenish colour
    conRenderer.screenTintR = 0.2;
    conRenderer.screenTintG = 0.7;
    conRenderer.screenTintB = 0.05;
    conRenderer.screenTintI = max(cos(statusPosionTimer * 2), 0) / 4;
    
    //When timer is &lt;= 0, remove the status
    if(statusPosionTimer &lt;= 0)
    {
        PlayerClearBadStatus(BadPlayerStatus.Poison);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Block

//Player Can Raise Shield when it is down
if(InputManagerGetPressed(InputMap.Block))
    shieldState = EquippedShieldState.Raising;

if(InputManagerGetReleased(InputMap.Block))
    shieldState = EquippedShieldState.Lowering;

switch(shieldState)
{
    case EquippedShieldState.Down: break;    
    case EquippedShieldState.Up: break;
    
    case EquippedShieldState.Raising:
        shieldRaise += (1/30) * global.DT;
        
        if(shieldRaise &gt;= 1.0)
            shieldState = EquippedShieldState.Up;
    break;
    
    case EquippedShieldState.Lowering:
        shieldRaise -= (1/30) * global.DT;
        
        if(shieldRaise &lt;= 0.0)
            shieldState = EquippedShieldState.Down;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Player State

switch(playerState)
{
    case PlayerState.Moving:
        PlayerStateMoving();
    break;
    
    case PlayerState.LookItem:   
        PlayerStateLookItem();
    break;
}

//Check if lastY is less than new y
if(posLastY &lt; posY )
{
    //It is, so we need to 'smooth' our y ascent
    posLastY = smoothstep(posLastY, posY, 0.15);
    camY = posLastY;
}else
if(posLastY &gt; posY)
{
    //It's not, so we just snap it to the new y.
    camY = posY;
    posLastY = posY;
}

camBob += (abs(fbSpeed) + abs(lrSpeed));

//Update the Camera
var camfX = sqrt(power(91, 2) - power(rotX, 2));
conRenderer.camXfrom = posX;
conRenderer.camYfrom = (camY + (height/2)) + (cos(camBob) * 0.05);
conRenderer.camZfrom = posZ;
conRenderer.camXto   = posX + lengthdir_x(camfX, rotY);
conRenderer.camYto   = conRenderer.camYfrom + rotX;
conRenderer.camZto   = posZ + lengthdir_y(camfX, rotY);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trace Interactable Objects

//Reset traced objects to null
tracedObject = null;

//Only trace when the player is trying to interacte with something
if(InputManagerGetPressed(InputMap.Activate) &amp;&amp; playerState != PlayerState.LookItem)
{
    //Trace ray as the player, looking for everything...
    if(CollisionWorldRaycast(conRenderer.camXfrom, conRenderer.camYfrom, conRenderer.camZfrom, conRenderer.camXto, conRenderer.camYto, conRenderer.camZto, CMask.Player, CMask.All))
    {
        if(point_distance_3d(CollisionHitX(), CollisionHitY(), CollisionHitZ(), posX, posY, posZ) &lt; maxTraceDist)
        {
            tracedObject = CollisionHitID();
            show_debug_message("Traced Object Is: " +string(tracedObject));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Listener Position

var LX = lengthdir_x(1, rotY);
var LZ = lengthdir_y(1, rotY);
var LM = sqrt(LX * LX + LZ * LZ);
LX /= LM;
LZ /= LM;

AEOListenerSetPosVel(conRenderer.camXfrom, conRenderer.camYfrom, conRenderer.camZfrom, 0, 0, 0);
AEOListenerSetOrientation(LX, 0, LZ, 0, 1, 0);
AEOListenerUpdate(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event for Weapon/Shield

if(shieldState != EquippedShieldState.Down)
{
    //Calculate Shield Position
    shieldPosX  = posX + lengthdir_x(0.22 * shieldRaise, (rotY-32));
    shieldPosY  = conRenderer.camYfrom - (0.20 - (0.05 * shieldRaise));
    shieldPosZ  = posZ + lengthdir_y(0.22 * shieldRaise, (rotY-32));

    //Draw Shield
    d3d_transform_set_rotation_y((180-rotY) - (90.0 * shieldRaise));
    d3d_transform_add_translation(shieldPosX, shieldPosY, shieldPosZ);
    MSMDraw(shieldMesh);
}   
    
//Reset Transformation
d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
